#include <linux/netfilter.h>
#include <linux/netfilter/nf_tables.h>
#include <linux/netfilter/nfnetlink.h>

#include <libmnl/libmnl.h>
#include <libnftnl/chain.h>
#include <libnftnl/common.h>
#include <libnftnl/rule.h>
#include <libnftnl/ruleset.h>
#include <libnftnl/set.h>
#include <libnftnl/table.h>

#include <libmnl/libmnl.h>
#include <libnftnl/chain.h>
#include <libnftnl/common.h>
#include <libnftnl/expr.h>
#include <libnftnl/rule.h>
#include <libnftnl/ruleset.h>
#include <libnftnl/set.h>
#include <libnftnl/table.h>
#include <linux/netfilter/xt_AUDIT.h>
#include <linux/netlink.h>

#include <linux/netfilter.h>
#include <linux/netfilter/nf_tables.h>
#include <stdint.h>

struct expr_ops;

struct list_head {
  struct list_head *next, *prev;
};

struct expr_ops {
  const char *name;
  uint32_t alloc_len;
  int nftnl_max_attr;
  struct attr_policy *attr_policy;
  void (*init)(const struct nftnl_expr *e);
  void (*free)(const struct nftnl_expr *e);
  int (*set)(struct nftnl_expr *e, uint16_t type, const void *data,
             uint32_t data_len);
  const void *(*get)(const struct nftnl_expr *e, uint16_t type,
                     uint32_t *data_len);
  int (*parse)(struct nftnl_expr *e, struct nlattr *attr);
  void (*build)(struct nlmsghdr *nlh, const struct nftnl_expr *e);
  int (*output)(char *buf, size_t len, uint32_t flags,
                const struct nftnl_expr *e);
};

struct nftnl_expr {
  struct list_head head;
  uint32_t flags;
  struct expr_ops *ops;
  uint8_t data[];
};

struct unft_base_chain_param {
  enum nf_inet_hooks hook_num;
  uint32_t prio;
};

typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;

struct nft_chain {
  /*      0      |       8 */ struct nft_rule_blob *blob_gen_0;
  /*      8      |       8 */ struct nft_rule_blob *blob_gen_1;
  /*     16      |      16 */ struct list_head rules;
  /*     32      |      16 */ struct list_head list;
  /*     48      |      16 */ struct rhlist_head {
    /*     48      |       8 */ struct rhash_head {
      /*     48      |       8 */ struct rhash_head *next;

      /* total size (bytes):    8 */
    } rhead;
    /*     56      |       8 */ struct rhlist_head *next;

    /* total size (bytes):   16 */
  } rhlhead;
  /*     64      |       8 */ struct nft_table *table;
  /*     72      |       8 */ u64 handle;
  /*     80      |       4 */ u32 use;
  /*     84: 0   |       1 */ u8 flags : 5;
  /*     84: 5   |       1 */ u8 bound : 1;
  /*     84: 6   |       1 */ u8 genmask : 2;
  /* XXX  3-byte hole      */
  /*     88      |       8 */ char *name;
  /*     96      |       2 */ u16 udlen;
  /* XXX  6-byte hole      */
  /*    104      |       8 */ u8 *udata;
  /*    112      |       8 */ struct nft_rule_blob *blob_next;

  /* total size (bytes):  120 */
};

struct nft_ctx;
struct nft_expr;
struct nft_regs;
enum nft_trans_phase;
struct sk_buff;
struct nft_data;
struct nft_regs_track;
struct nft_offload_ctx;
struct nft_flow_rule;
struct flow_stats;
struct nft_pktinfo;
struct net;

struct nft_expr_ops {
  /*      0      |       8 */ void (*eval)(const struct nft_expr *,
                                           struct nft_regs *,
                                           const struct nft_pktinfo *);
  /*      8      |       8 */ int (*clone)(struct nft_expr *,
                                           const struct nft_expr *);
  /*     16      |       4 */ unsigned int size;
  /* XXX  4-byte hole      */
  /*     24      |       8 */ int (*init)(const struct nft_ctx *,
                                          const struct nft_expr *,
                                          const struct nlattr *const *);
  /*     32      |       8 */ void (*activate)(const struct nft_ctx *,
                                               const struct nft_expr *);
  /*     40      |       8 */ void (*deactivate)(const struct nft_ctx *,
                                                 const struct nft_expr *,
                                                 enum nft_trans_phase);
  /*     48      |       8 */ void (*destroy)(const struct nft_ctx *,
                                              const struct nft_expr *);
  /*     56      |       8 */ void (*destroy_clone)(const struct nft_ctx *,
                                                    const struct nft_expr *);
  /*     64      |       8 */ int (*dump)(struct sk_buff *,
                                          const struct nft_expr *, bool);
  /*     72      |       8 */ int (*validate)(const struct nft_ctx *,
                                              const struct nft_expr *,
                                              const struct nft_data **);
  /*     80      |       8 */ bool (*reduce)(struct nft_regs_track *,
                                             const struct nft_expr *);
  /*     88      |       8 */ bool (*gc)(struct net *, const struct nft_expr *);
  /*     96      |       8 */ int (*offload)(struct nft_offload_ctx *,
                                             struct nft_flow_rule *,
                                             const struct nft_expr *);
  /*    104      |       8 */ bool (*offload_action)(const struct nft_expr *);
  /*    112      |       8 */ void (*offload_stats)(struct nft_expr *,
                                                    const struct flow_stats *);
  /*    120      |       8 */ const struct nft_expr_type *type;
  /*    128      |       8 */ void *data;

  /* total size (bytes):  136 */
};

struct nft_rule {
  struct list_head list;
  u64 handle : 42;
  u64 genmask : 2;
  u64 dlen : 12;
  u64 udata : 1;
  unsigned char data[];
};

struct nft_expr {
  struct nft_expr_ops *ops;
  unsigned char data[] __attribute__((aligned(__alignof__(u64))));
};

struct nftnl_chain *build_chain(const char *chain_name, const char *table_name,
                                struct unft_base_chain_param *base_param,
                                int chain_id);

struct nftnl_rule *build_rule(char *table_name, char *chain_name,
                              uint16_t family, uint64_t *handle);

struct nftnl_table *build_table(const char *table_name, uint16_t family);